(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{319:function(e,a,t){e.exports=t.p+"assets/img/module-graph.eea56fa4.svg"},337:function(e,a,t){"use strict";t.r(a);var r=t(6),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"architecture"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#architecture"}},[e._v("#")]),e._v(" Architecture")]),e._v(" "),r("h2",{attrs:{id:"modules"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#modules"}},[e._v("#")]),e._v(" Modules")]),e._v(" "),r("h3",{attrs:{id:"overview"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),r("p",[e._v("Rust's module system provides an easy way to group code for readability, reuse, and privacy. The boxes in "),r("strong",[e._v("Figure 1")]),e._v(" are derivitive of the directory structure of the source code, with important modules having further explanation following.")]),e._v(" "),r("p",[e._v("The application is split into two main projects:")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("Sandbox")]),e._v(": a binary application to run and demonstrate the Glamour library.")]),e._v(" "),r("li",[r("strong",[e._v("Glamour")]),e._v(": a library project containing all the rendering functionality.")])]),e._v(" "),r("p",[r("img",{attrs:{src:t(319),alt:"Module Graph"}})]),e._v(" "),r("p",[r("strong",[e._v("Figure 1:")]),e._v(" A simplified module and dependency graph for the application.")]),e._v(" "),r("h3",{attrs:{id:"app"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#app"}},[e._v("#")]),e._v(" app")]),e._v(" "),r("p",[e._v("The app module is responsible for managing the window, event loop, and OpenGL context. This is where layers are stored and processed.")]),e._v(" "),r("h3",{attrs:{id:"layer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#layer"}},[e._v("#")]),e._v(" layer")]),e._v(" "),r("p",[e._v("A layer is a trait (like an interface) that can handle events and do things on update loops.")]),e._v(" "),r("h3",{attrs:{id:"asset"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#asset"}},[e._v("#")]),e._v(" asset")]),e._v(" "),r("p",[e._v("This module provides a way to load files from the "),r("code",[e._v("assets")]),e._v(" folder, which is copied relative to the executable on build.")]),e._v(" "),r("h3",{attrs:{id:"gl-call"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gl-call"}},[e._v("#")]),e._v(" gl_call")]),e._v(" "),r("p",[e._v("Since all the OpenGL functions are inherently "),r("em",[e._v("unsafe")]),e._v(", the "),r("code",[e._v("gl_call!")]),e._v(" macro will wrap a function and "),r("em",[e._v("panic")]),e._v(" if it errors, making OpenGL much easier to use.")]),e._v(" "),r("h3",{attrs:{id:"renderer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#renderer"}},[e._v("#")]),e._v(" renderer")]),e._v(" "),r("p",[e._v("This is what actually makes the draw calls. The renderer also manages the shaders, vertex arrays, and G-buffer, amongst other things.")]),e._v(" "),r("h2",{attrs:{id:"sandbox"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sandbox"}},[e._v("#")]),e._v(" Sandbox")]),e._v(" "),r("p",[e._v("The Sandbox project initialises an "),r("strong",[e._v("app")]),e._v(" instance and attaches a "),r("strong",[e._v("sandbox_layer")]),e._v(" to it. The "),r("strong",[e._v("sandbox_layer")]),e._v(" is responsible for instructing the "),r("strong",[e._v("renderer")]),e._v(" what to render, e.g., "),r("em",[e._v("render 10,000 cubes at these randomly seeded positions from this camera angle")]),e._v(".")])])}),[],!1,null,null,null);a.default=s.exports}}]);