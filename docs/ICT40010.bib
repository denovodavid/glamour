
@article{olsson_clustered_2012,
	title = {Clustered Deferred and Forward Shading},
	issn = {2079-8679},
	url = {http://diglib.eg.org/handle/10.2312/EGGH.HPG12.087-096},
	doi = {10.2312/EGGH/HPG12/087-096},
	abstract = {This paper presents and investigates Clustered Shading for deferred and forward rendering. In Clustered Shading, view samples with similar properties (e.g. 3D-position and/or normal) are grouped into clusters. This is comparable to tiled shading, where view samples are grouped into tiles based on 2D-position only. We show that Clustered Shading creates a better mapping of light sources to view samples than tiled shading, resulting in a signiÔ¨Åcant reduction of lighting computations during shading. Additionally, Clustered Shading enables using normal information to perform per-cluster back-face culling of lights, again reducing the number of lighting computations. We also show that Clustered Shading not only outperforms tiled shading in many scenes, but also exhibits better worst case behaviour under tricky conditions (e.g. when looking at high-frequency geometry with large discontinuities in depth). Additionally, Clustered Shading enables real-time scenes with two to three orders of magnitudes more lights than previously feasible (up to around one million light sources).},
	pages = {10 pages},
	journaltitle = {Eurographics/ {ACM} {SIGGRAPH} Symposium on High Performance Graphics},
	author = {Olsson, Ola and Billeter, Markus and Assarsson, Ulf},
	urldate = {2020-05-04},
	date = {2012},
	langid = {english},
	note = {Artwork Size: 10 pages
{ISBN}: 9783905674415
Publisher: The Eurographics Association},
	keywords = {Categories and Subject Descriptors (according to {ACM} {CCS}): I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism-Color, shading, shadowing, and texture},
	file = {Olsson et al. - 2012 - Clustered Deferred and Forward Shading.pdf:/Users/david/Zotero/storage/L2RZMEEP/Olsson et al. - 2012 - Clustered Deferred and Forward Shading.pdf:application/pdf}
}

@online{rust_programming_language_rust_2020,
	title = {Rust Programming Language},
	url = {https://www.rust-lang.org/},
	titleaddon = {Rust Programming Language},
	author = {{Rust Programming Language}},
	urldate = {2020-03-12},
	date = {2020}
}

@online{opengl_opengl_2020,
	title = {{OpenGL}},
	url = {https://www.opengl.org/},
	author = {{OpenGL}},
	urldate = {2020-03-12},
	date = {2020}
}

@online{vulkan_vulkan_2020,
	title = {Vulkan},
	url = {https://www.khronos.org/vulkan/},
	author = {{Vulkan}},
	urldate = {2020-03-12},
	date = {2020}
}

@online{visual_studio_code_visual_2020,
	title = {Visual Studio Code},
	url = {https://code.visualstudio.com/},
	author = {{Visual Studio Code}},
	urldate = {2020-03-12},
	date = {2020}
}

@online{github_github_2020,
	title = {{GitHub}},
	url = {https://github.com/},
	author = {{GitHub}},
	urldate = {2020-03-12},
	date = {2020}
}

@online{vuepress_vuepress_2020,
	title = {{VuePress}},
	url = {https://vuepress.vuejs.org/},
	author = {{VuePress}},
	urldate = {2020-03-12},
	date = {2020}
}

@online{de_vries_learn_2020,
	title = {Learn {OpenGL}},
	url = {https://learnopengl.com/},
	titleaddon = {Learn {OpenGL}, extensive tutorial resource for learning Modern {OpenGL}},
	author = {de Vries, Joey},
	urldate = {2020-03-05},
	date = {2020}
}

@online{owens_forward_2013,
	title = {Forward Rendering vs. Deferred Rendering},
	url = {https://gamedevelopment.tutsplus.com/articles/forward-rendering-vs-deferred-rendering--gamedev-12342},
	titleaddon = {Forward Rendering vs. Deferred Rendering},
	author = {Owens, Brent},
	urldate = {2020-03-05},
	date = {2013}
}

@misc{holland_technical_2020,
	title = {Technical Report},
	abstract = {In real-time computer graphics, a rendering pipeline provides a workflow to draw things on the screen. There are two contemporary methods to visualise geometry and shading, Forward Rendering and Deferred Rendering. This paper specifies the technical details of implementing such rendering pipelines. Using the Rust programming language for its performance and {OpenGL} as the definitive cross-platform graphics {API}, an application was created to benchmark the performance of the two rendering pipelines to determine which pipeline best suits what general usage scenarios.},
	author = {Holland, David},
	date = {2020-06-28}
}